<?php

/**
 * @file
 * Provides FusionPro templating server integration.
 */

/**
 * Implements hook_permission().
 */
function fusion_pro_permission() {
  return array(
    'administer FusionPro' => array(
      'title' => t('administer FusionPro'),
      'description' => t('administer FusionPro server settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fusion_pro_menu() {
  $links['fusion_pro_ajax'] = array(
    'title' => 'FusionPro Ajax',
    'description' => 'Return content to an AJAX request.',
    'page callback' => '_fusion_pro_return_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $links['admin/config/services/fusion_pro'] = array(
    'title' => 'FusionPro',
    'description' => 'Setup the connection settings for talking to a FusionPro server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_fusion_pro_admin_settings'),
    'access arguments' => array('administer FusionPro'),
  );
  return $links;
}

/**
 * Implements hook_stream_wrappers().
 */
function fusion_pro_stream_wrappers() {
  return array(
    'preview' => array(
      'name' => t('Preview files'),
      'class' => 'FusionProPreviewStreamWrapper',
      'description' => t('Preview files generated by Fusion Pro.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Menu callback, admin form.
 */
function _fusion_pro_admin_settings() {
  $form = array();
  $form['fusion_pro_templating_server'] = array(
    '#type' => 'fieldset',
    '#title' => t("FusionPro Templating Server"),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  // $xml_rpc_host = '172.16.1.37'; // 'cltad01.cgraphics.com';
  $form['fusion_pro_templating_server']['fusion_pro_templating_host'] = array(
    '#type' => 'textarea',
    '#title' => t('Host'),
    '#default_value' => variable_get('fusion_pro_templating_host', '192.168.0.100'),
  );
  $form['fusion_pro_templating_server']['fusion_pro_templating_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#default_value' => variable_get('fusion_pro_templating_port', '80'),
  );
  // $xml_rpc_uri = '/fps/template.php';
  $form['fusion_pro_templating_server']['fusion_pro_templating_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('XML-RPC URI'),
    '#default_value' => variable_get('fusion_pro_templating_uri', '/template.php'),
  );
  // $xml_rpc_user = 'fps';
  $form['fusion_pro_templating_server']['fusion_pro_templating_user'] = array(
    '#type' => 'textfield',
    '#title' => t('XML-RPC User'),
    '#default_value' => variable_get('fusion_pro_templating_user', 'user'),
  );
  // $xml_rpc_pass = '4r5banaZ9Xap';
  $form['fusion_pro_templating_server']['fusion_pro_templating_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('XML-RPC Password'),
    '#default_value' => variable_get('fusion_pro_templating_pass', 'pass'),
  );
  // $fusion_pro_client = 'lowes';
  $form['fusion_pro_templating_server']['fusion_pro_templating_client'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Category'),
    '#default_value' => variable_get('fusion_pro_templating_client', 'client'),
  );
  $form['fusion_pro_templating_server']['fusion_pro_templating_secure'] = array(
    '#type' => 'checkbox',
    '#title' => t('Secure Connection (SSL)'),
    '#description' => t('This will prepend "tls://" to the Host.'),
    '#default_value' => variable_get('fusion_pro_templating_secure'),
  );
  $form['fusion_pro_pdf_storage_server'] = array(
    '#type' => 'fieldset',
    '#title' => 'FusionPro PDF Storage Server',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  // $template_return_method = 'ftp-ssl';
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_method'] = array(
    '#type' => 'textfield',
    '#title' => t('Method'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_method', 'ftp-ssl'),
  );
  // $template_return_server_url = 'cltweb07.cgraphics.com';
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_host', '192.168.0.100'),
  );
  // $template_return_server_path = 'public_html/preview';
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Folder'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_folder', '/preview'),
  );
  // $template_return_server_user = 'lowessigns';
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_user', 'user'),
  );
  // $template_return_server_pass;
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_pass', 'pass'),
  );
  // $template_return_server_pass;
  $form['fusion_pro_pdf_storage_server']['fusion_pro_pdf_storage_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Preview folder'),
    '#description' => t('Absolute path.'),
    '#default_value' => variable_get('fusion_pro_pdf_storage_path', '/var/www/preview'),
  );
  $form['fusion_pro_debug_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Debug Mode'),
    '#description' => t('Should never be activated on live server, for debugging in testing only.'),
    '#options' => array(
      1 => 'on',
      0 => 'off',
    ),
    '#default_value' => variable_get('fusion_pro_debug_mode', 0),
  );
  $form['fusion_pro_devel_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Development Mode'),
    '#description' => t('Should never be activated on live server, for debugging in testing only. Assumes no Fusion Pro server available.'),
    '#options' => array(
      1 => 'on',
      0 => 'off',
    ),
    '#default_value' => variable_get('fusion_pro_devel_mode', 0),
  );
  return system_settings_form($form);
}

/**
 * Menu callback, handles js requests.
 *
 * In order to hit this url, use something along these lines.
 * First convert your data into a js string.
 * The double nested array is important, each array is a new PDF file,
 * each array within the array is a new sheet or component of the PDF.
 * $data = array(
 *   'template_file' = 'yourtemplatefile',
 *   'type' = 'type',
 *   'data' = array(
 *     'first_pdf_name' = array(
 *        array('field1' => 'value1', 'field2' => 'value2', etc),
 *        array('field1' => 'value1', 'field2' => 'value2', etc)
 *      ),
 *     'second_pdf_name' = array(
 *       array('field1' => 'value1', 'field2' => 'value2', etc)
 *     ),
 *     etc,
 *   )
 * );
 * $datastring = drupal_json_encode($data);
 *
 * Then send the string in your ajax.
 * $.ajax({
 *   type: "GET",
 *   url: "fusion_pro_ajax",
 *   data: ($datastring),
 *   dataType: "json",
 *   success: function(data){
 *     eval(data)
 *   }
 * });
 */
function _fusion_pro_return_ajax($data) {
  // Take json'd string and turn it back into an array.
  $data = drupal_json_decode($data);
  // Make call to fusion pro with data.
  $template_file = $data['template_file'];
  $type = $data['type'];
  $data = $data['data'];
  $method = empty($data['method']) ? 'generate_v2' : $data['method'];
  $caller = 'fusion_pro';
  if (!empty($data['caller'])) {
    $caller = $data['caller'];
  }
  $result = fusion_pro_get_pdfs($template_file, $type, $data, $caller, $method);
  // Outputs json result.
  drupal_json_output($result);
}

/*
 * API functions - these are meant to be called from other modules.
 */

/**
 * API function, multiple PDF sets call.
 */
function fusion_pro_get_pdfs($template_file, $type, $pdfs_data, $caller = 'fusion_pro', $method = 'generate_v2') {
  foreach ($pdfs_data as $pdf_name => $data) {
    $templates[$pdf_name] = fusion_pro_get_pdf($template_file, $type, $pdf_name, $data, $caller, $method);
  }
  return $templates;
}

/**
 * API function, single PDF set call.
 */
function fusion_pro_get_pdf($template_file, $type, $pdf_name, $data, $caller = 'fusion_pro', $method = 'generate_v2') {
  // If we're in Development mode, then we're probably in an environment where
  // there is not FP server to test with, for example, a home machine.
  // Hence, we return early to avoid calling what we don't have.
  if (variable_get('fusion_pro_devel_mode', 0) == 1) {
    return FALSE;
  }
  if (isset($template_file) && isset($type) && isset($data)) {
    $template = _fusion_pro_do_xml_rpc($template_file, $type, $pdf_name, $data, $caller, $method);
    if (is_array($template)) {
      return FALSE;
    }
    else {
      // Returns the PDF name.
      return $template;
    }
  }
}

/**
 * Helper function, xmlrpc call to FP service.
 */
function _fusion_pro_do_xml_rpc($template_file, $type, $pdf_name, $data, $caller = 'fusion_pro', $method = 'generate_v2') {
  // Footprint reasons: Call the xmlrpc services only when needed. Save memory.
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'fusion_pro') . '/fusion_pro.inc';
  // Where data is an assoc array of strings to values.
  // Replace strings for FusionPro settings as needed.
  $encoding = variable_get('fusion_pro_encoding', 'utf-8');
  foreach ($data as $set => $dataset) {
    foreach ($dataset as $key => $value) {
      $data[$set][$key] = fusion_pro_encode_entities($value, $encoding, $caller);
    }
  }
  // Prep the template request.
  $xml_rpc_args = array(
    variable_get('fusion_pro_templating_client', 'client'),
    "$template_file",
    "$type",
    // The drop off location is not configurable by the caller.
    // On purpose to minimze complexity and permissioning.
    // The calling system is responsible for moving the PDF
    // to it's own locations and tracking it as needed.
    variable_get('fusion_pro_pdf_storage_method', ''),
    variable_get('fusion_pro_pdf_storage_host', ''),
    variable_get('fusion_pro_pdf_storage_user', ''),
    variable_get('fusion_pro_pdf_storage_pass', ''),
    variable_get('fusion_pro_pdf_storage_folder', ''),
    // Data is an array of arrays.
    // Each array in the array is a set of strings => values for the template.
    $data,
    $pdf_name,
  );

  // Get list of hosts and setup round robin.
  $host_config = variable_get('fusion_pro_templating_host', '');
  $host_array = preg_split("/\s+/", $host_config);
  $host_array = array_filter($host_array);

  // Throw an error if there aren't any hosts in config.
  if (empty($host_array)) {
    watchdog('fusion_pro', 'There are no hosts in FusionPro config.', array(), WATCHDOG_CRITICAL);
    return FALSE;
  }
  else {
    // Set up last host index to keep track of the last used fp server.
    $host_last_index = variable_get('fusion_pro_templating_host_last_index', '0');
    $host = $host_array[$host_last_index];

    // Increment last_host_index so we can step though the list of hosts
    // in sequence.
    if ($host_last_index >= (count($host_array) - 1)) {
      // If we've gotten to the end of the array, reset host_last_index to 0.
      variable_set('fusion_pro_templating_host_last_index', 0);
    }
    else {
      // Increment host_last_index so that the next fp will be used on next
      // request.
      variable_set('fusion_pro_templating_host_last_index', $host_last_index + 1);
    }

    // Make the call.
    $template = xu_rpc_http_concise(
      array(
        'method' => $method,
        'args' => $xml_rpc_args,
        'host' => $host,
        'port' => variable_get('fusion_pro_templating_port', ''),
        'uri' => variable_get('fusion_pro_templating_uri', ''),
        'debug' => variable_get('fusion_pro_debug_mode', 0),
        'user' => variable_get('fusion_pro_templating_user', ''),
        'pass' => variable_get('fusion_pro_templating_pass', ''),
        'secure' => variable_get('fusion_pro_templating_secure', TRUE),
      )
    );

    // Save the last requested $host into a variable.
    variable_set('fusion_pro_templating_host_last_requested_host', $host);

    // Log requested filename as well as the last $host.
    watchdog('fusion_pro', '@template from @server was returned from Fusion Pro', array('@template' => $template, '@server' => $host), WATCHDOG_DEBUG);

    return $template;
  }
}

/**
 * Helper function, translate special characters.
 */
function fusion_pro_encode_entities($str, $encoding = 'utf-8', $caller = 'fusion_pro') {
  $patterns = array(
    // To avoid any subsequent replacements, the chr(38)/&amp; (ampersand)
    // conversion must be the first pattern.
    chr(38) => '&amp;',
    chr(18) => '&thinsp;',
    chr(19) => '&emsp;',
    chr(20) => '&ensp;',
    '"' => '\'\'',
    chr(60) => '&lt;',
    chr(62) => '&gt;',
    '†' => '&dagger;',
    '‡' => '&Dagger;',
    '‘' => '&lsquor;',
    '’' => '&rsquor;',
    '“' => '&ldquor;',
    '”' => '&rdquor;',
    '…' => '&hellip;',
    '•' => '&bull;',
    '–' => '&ndash;',
    '—' => '&mdash;',
    '™' => '&trade;',
    '¡' => '&iexcl;',
    '¢' => '&cent;',
    '£' => '&pound;',
    '¥' => '&yen;',
    '¦' => '&brvbar;',
    '€' => '&euro;',
    '§' => '&sect;',
    '©' => '(C)',
    '«' => '&lArr;',
    '»' => '&rArr;',
    '®' => '(R)',
    'ﾨ' => '(R)',
    'º' => '(D)',
    '°' => '(D)',
    '±' => '&plusmn;',
    '´' => '&acute;',
    '¶' => '&para;',
    '¹' => '&sup1;',
    '1⁄4' => '&frac14;',
    '1⁄2' => '&half;',
    '3⁄4' => '&frac34;',
    '¿' => '&iquest;',
    'À' => '&Agrave;',
    'Á' => '&Aacute;',
    'Â' => '&Acirc;',
    'Ã' => '&Atilde;',
    'Ä' => '&Auml;',
    'Å' => '&Aring;',
    'Æ' => '&AElig;',
    'Ç' => '&Ccedil;',
    'È' => '&Egrave;',
    'É' => '&Eacute;',
    'Ê' => '&Ecirc;',
    'Ë' => '&Euml;',
    'Ì' => '&Igrave;',
    'Í' => '&Iacute;',
    'Î' => '&Icirc;',
    'Ï' => '&Iuml;',
    'Ñ' => '&Ntilde;',
    'Ò' => '&Ograve;',
    'Ó' => '&Oacute;',
    'Ô' => '&Ocirc;',
    'Õ' => '&Otilde;',
    'Ö' => '&Ouml;',
    'Ø' => '&Oslash;',
    'Ù' => '&Ugrave;',
    'Ú' => '&Uacute;',
    'Û' => '&Ucirc;',
    'Ü' => '&Uuml;',
    'Ý' => '&Yacute;',
    'à' => '&agrave;',
    'á' => '&aacute;',
    'â' => '&acirc;',
    'ã' => '&atilde;',
    'ä' => '&auml;',
    'å' => '&aring;',
    'æ' => '&aelig;',
    'ç' => '&ccedil;',
    'è' => '&egrave;',
    'é' => '&eacute;',
    'ê' => '&ecirc;',
    'ë' => '&euml;',
    'ì' => '&igrave;',
    'í' => '&iacute;',
    'î' => '&icirc;',
    'ï' => '&iuml;',
    'ñ' => '&ntilde;',
    'ò' => '&ograve;',
    'ó' => '&oacute;',
    'ô' => '&ocirc;',
    'õ' => '&otilde;',
    'ö' => '&ouml;',
    'ø' => '&oslash;',
    'ù' => '&ugrave;',
    'ú' => '&uacute;',
    'û' => '&ucirc;',
    'ü' => '&uuml;',
    'ý' => '&yacute;',
    'ÿ' => '&yuml;',
  );
  // Modify this by the caller hook in case we
  // have a specific string set for this caller.
  if ($caller != 'fusion_pro' && module_hook($caller, 'fusion_pro_encode_entities')) {
    $patterns = module_invoke($caller, 'fusion_pro_encode_entities', $patterns);
  }
  // Allow other modules to alter encoding patterns.
  drupal_alter('fusion_pro_encode_entities', $patterns);

  // Convert string for each pattern.
  mb_regex_encoding($encoding);
  foreach ($patterns as $key => $value) {
    $str = mb_ereg_replace($key, $value, $str);
  }
  $str = str_replace('&lt;br&gt;', '<br />', $str);
  return $str;
}

/**
 * Helper function, translate date to FP compatible dates.
 */
function fusion_pro_date_format($date_string) {
  if (drupal_strlen($date_string) > 0) {
    // Allow stamps to be passed directly or strings to be converted.
    if (!is_numeric($date_string)) {
      $date_stamp = strtotime($date_string);
    }
    else {
      $date_stamp = $date_string;
    }
    // Use 0 seconds as timezone offset since incoming dates look like
    // 2010-03-31T00:00:00
    return format_date($date_stamp, 'custom', "n/j/y", 0);
  }
}
