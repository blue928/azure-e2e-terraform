# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time terraform code is pushed, on all branches.
trigger:
  branches:
    include:
    - '*'
  #paths:
  #  include:
  #  - 'IaC/terraform/*'
variables:
- name: env
  value: aks-cluster-ci-dev
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa  
- name: PROD
  value: production
- name: terraformWorkingDirectory
  value: $(System.DefaultWorkingDirectory)
pool:
  name: 'Azure Pipelines'
  #name: Default
  #vmImage: 'ubuntu-latest'
# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform 
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      workspace:
        clean: all
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '1.1.7'
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(terraformWorkingDirectory)'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: Bash@3
        displayName: Show Directory Contents
        inputs:
          targetType: 'inline'
          script: |
            tree "$(terraformWorkingDirectory)"
            tree "$(Pipeline.Workspace)"
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(terraformWorkingDirectory)'
          commandOptions: '-upgrade'
          backendType: 'azurerm'
          backendServiceArm: 'Terraform Installer'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'terraform-global-state-files'
          backendAzureRmResourceGroupLocation: 'eastus'
          backendAzureRmStorageAccountName: 'tfglobalstatefilessa'
          backendAzureRmStorageAccountSku: 'Standard_LRS'
          backendAzureRmContainerName: 'tfstatefilescontainername'
          backendAzureRmKey: 'aksclustermodule.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(terraformWorkingDirectory)'
          allowTelemetryCollection: false
      #- task: TerraformCLI@0
      #  displayName: Terraform Plan
      #  inputs:
      #    command: 'plan'
      #    workingDirectory: '$(terraformWorkingDirectory)'
      #    environmentServiceName: 'Terraform Installer'
      #    commandOptions: '-out $(Pipeline.Workspace)/terraform-manifests-out/$(PROD)-$(Build.BuildId).out'''
      #    allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)

- stage: DeployTerraformAKSCluster
  jobs:
    - deployment: DeployTerraformAKSCluster
      workspace:
        clean: all
      displayName: DeployTerraformAKSCluster
      #pool:
      #  name: Default
      environment: $(env)      
      strategy:
        runOnce:
          deploy:
            steps:            
            #- task: DownloadSecureFile@1
            #  displayName: Download SSH Key
            #  name: sshkey
            #  inputs:
            #    secureFile: 'aksprodsshkey.pub'
            - task: Bash@3
              displayName: Show Directory Contents
              inputs:
                targetType: 'inline'
                script: |
                  tree "$(terraformWorkingDirectory)"
                  tree "$(Pipeline.Workspace)"
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'Terraform Installer'
                ensureBackend: true
                backendAzureRmResourceGroupName: 'terraform-global-state-files'
                backendAzureRmResourceGroupLocation: 'eastus'
                backendAzureRmStorageAccountName: 'tfglobalstatefilessa'
                backendAzureRmStorageAccountSku: 'Standard_LRS'
                backendAzureRmContainerName: 'tfstatefilescontainername'
                backendAzureRmKey: 'aksclustermodule.tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'Terraform Installer'
                commandOptions: '-out $(Pipeline.Workspace)/terraform-manifests-out/$(PROD)-$(Build.BuildId).out'''
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'Terraform Installer'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(Build.BuildId).out'
                allowTelemetryCollection: false